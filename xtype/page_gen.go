package xtype

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CursorPager) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cursor":
			z.Cursor, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
		case "Size":
			z.Size, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "HasMore":
			z.HasMore, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "HasMore")
				return
			}
		case "Total":
			z.Total, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CursorPager) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Cursor"
	err = en.Append(0x84, 0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cursor)
	if err != nil {
		err = msgp.WrapError(err, "Cursor")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "HasMore"
	err = en.Append(0xa7, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.HasMore)
	if err != nil {
		err = msgp.WrapError(err, "HasMore")
		return
	}
	// write "Total"
	err = en.Append(0xa5, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Total)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CursorPager) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Cursor"
	o = append(o, 0x84, 0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72)
	o = msgp.AppendInt64(o, z.Cursor)
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt32(o, z.Size)
	// string "HasMore"
	o = append(o, 0xa7, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65)
	o = msgp.AppendBool(o, z.HasMore)
	// string "Total"
	o = append(o, 0xa5, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt32(o, z.Total)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CursorPager) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cursor":
			z.Cursor, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "HasMore":
			z.HasMore, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HasMore")
				return
			}
		case "Total":
			z.Total, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CursorPager) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int64Size + 5 + msgp.Int32Size + 8 + msgp.BoolSize + 6 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PagePager) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Page":
			z.Page, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Page")
				return
			}
		case "Size":
			z.Size, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Total":
			z.Total, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PagePager) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Page"
	err = en.Append(0x83, 0xa4, 0x50, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Page)
	if err != nil {
		err = msgp.WrapError(err, "Page")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Total"
	err = en.Append(0xa5, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Total)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PagePager) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Page"
	o = append(o, 0x83, 0xa4, 0x50, 0x61, 0x67, 0x65)
	o = msgp.AppendInt64(o, z.Page)
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt32(o, z.Size)
	// string "Total"
	o = append(o, 0xa5, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt32(o, z.Total)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PagePager) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Page":
			z.Page, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Page")
				return
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Total":
			z.Total, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PagePager) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int64Size + 5 + msgp.Int32Size + 6 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Pager) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cursor":
			z.Cursor, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "HasMore":
			z.HasMore, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "HasMore")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Pager) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Cursor"
	err = en.Append(0x83, 0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cursor)
	if err != nil {
		err = msgp.WrapError(err, "Cursor")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "HasMore"
	err = en.Append(0xa7, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.HasMore)
	if err != nil {
		err = msgp.WrapError(err, "HasMore")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Pager) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Cursor"
	o = append(o, 0x83, 0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72)
	o = msgp.AppendInt64(o, z.Cursor)
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "HasMore"
	o = append(o, 0xa7, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65)
	o = msgp.AppendInt32(o, z.HasMore)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pager) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cursor":
			z.Cursor, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "HasMore":
			z.HasMore, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HasMore")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Pager) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int64Size + 5 + msgp.Int64Size + 8 + msgp.Int32Size
	return
}
